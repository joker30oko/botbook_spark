import time
import asyncio
import aiohttp
import pandas as pd
import html
import json

from aiogram.types import CallbackQuery, Message
from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from settings import config, EDIT_MSG_DELAY
from keyboard.mkp_cancel import mkp_cancel, mkp_cancel_sender
from keyboard.mkp_choice import mkp_choice
from external.messages import send_to_group, send_secret_group
from bot_create import bot
from modules.randomize_msg import generate_variations
from modules.brevo import get_account_status


url = "https://api.brevo.com/v3/smtp/email"

accounts = {
    '5ac40d2bae0b17cc25ef7548867d9158380b28cb': 'info@hotelmadridspain.live',
    'd28069732d89caec5e5a6b67004d1dfea4448467': 'info@hotelconfirmreserve.com'
}

class Startwork(StatesGroup):
    theme = State()
    text = State()
    choice = State()
    link = State()
    excel = State()
    recipients = State()


router_cb_start = Router()


@router_cb_start.callback_query(F.data.startswith('start.'))
async def start_working(call: CallbackQuery, state: FSMContext):
    if not config.get_busy():
        if call.data == 'start.work':
            await call.message.edit_text(text='<b>üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É —Ä–∞—Å—Å—ã–ª–∫–∏: </b>',
                                        parse_mode='html', reply_markup=mkp_cancel)
            await state.set_state(Startwork.theme)


@router_cb_start.message(Startwork.theme)
async def input_theme(msg: Message, state: FSMContext):
    await state.update_data(theme=msg.text)
    await msg.answer(
        '<b>üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏(–º–æ–∂–Ω–æ —Å html —Ç–µ–≥–∞–º–∏)\n'
        '–ï—Å–ª–∏ –≤—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ —Ä–µ–∂–∏–º –ª–∏—á–Ω–∞—è —Å—Å—ã–ª–∫–∞ —É –∫–∞–∂–¥–æ–≥–æ,'
        '–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ {link} –≤ —Å–≤–æ—ë–º —Ç–µ–∫—Å—Ç–µ, –∫—É–¥–∞ –±—É–¥–µ—Ç –ø–æ–¥—Å—Ç–∞–≤–ª—è—Ç—å—Å—è —Å—Å—ã–ª–∫–∞.\n'
        '–ï—Å–ª–∏ –≤—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ —Ä–µ–∂–∏–º –æ–¥–Ω–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ –≤—Å–µ—Ö, –≤—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –∑–∞—Ä–∞–Ω–µ–µ –≤ —Ç–µ–∫—Å—Ç.'
        '\n–ï—Å–ª–∏ –≤—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ —Ä–µ–∂–∏–º –æ–¥–Ω–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è, –≤–≤–µ–¥–∏—Ç–µ –≤ —Ç–µ–∫—Å—Ç {number} –∫—É–¥–∞ –±—É–¥–µ—Ç –ø–æ–¥—Å—Ç–∞–≤–ª—è—Ç—å—Å—è –Ω–æ–º–µ—Ä –±—Ä–æ–Ω–∏.</b>',
        parse_mode='html',
        reply_markup=mkp_cancel
    )
    await state.set_state(Startwork.text)


@router_cb_start.message(Startwork.text)
async def input_choice(msg: Message, state: FSMContext):
    await state.update_data(text=msg.text)
    await msg.answer('<b>–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç —Ä–∞—Å—Å—ã–ª–∫–∏</b>',
                     reply_markup=mkp_choice,
                     parse_mode='html')
    await state.set_state(Startwork.choice)


@router_cb_start.callback_query(lambda c: c.data.startswith('choice.'))
async def select_choice(callback_query: CallbackQuery, state: FSMContext):
    choice = callback_query.data
    message_text = ''
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–¥ —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π –Ω–æ–≤–æ–≥–æ
    await state.update_data(is_excel=False, is_booking_number=False)

    if choice == 'choice.one_link_all':
        message_text = '<b>üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π (–º–æ–∂–Ω–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ txt)</b>'
        await state.set_state(Startwork.recipients)
    elif choice == 'choice.personal_link':
        message_text = '<b>üîó –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏, –±–µ–∑ –Ω–æ–º–µ—Ä–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è. \n–ü—Ä–∏–º–µ—Ä: https://hotelbooking.com/</b>'
        await state.set_state(Startwork.link)
        await state.update_data(one_to_one=True)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ is_excel
    elif choice == 'choice.number_booking':
        message_text = '<b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ excel —Ñ–∞–π–ª —Å –±—Ä–æ–Ω—è–º–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ xlsx, –≥–¥–µ –∫–æ–ª–æ–Ω–∫–∞ email —ç—Ç–æ –≥–æ—Å—Ç–µ–≤—ã–µ, –∞ id, —ç—Ç–æ –Ω–æ–º–µ—Ä–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è</b>'
        await state.set_state(Startwork.excel)
        await state.update_data(is_booking_number=True)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ is_booking_number

    await callback_query.message.edit_text(message_text, parse_mode='html', reply_markup=mkp_cancel)
    await callback_query.answer()


@router_cb_start.message(Startwork.link)
async def input_link(msg: Message, state: FSMContext):
    await state.update_data(link=msg.text)
    await msg.answer('<b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ excel —Ñ–∞–π–ª —Å –±—Ä–æ–Ω—è–º–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ xlsx, –≥–¥–µ –∫–æ–ª–æ–Ω–∫–∞ email —ç—Ç–æ –≥–æ—Å—Ç–µ–≤—ã–µ, –∞ id, —ç—Ç–æ –Ω–æ–º–µ—Ä–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è</b>',
                     parse_mode='html', reply_markup=mkp_cancel)
    await state.set_state(Startwork.excel)


@router_cb_start.message(Startwork.excel)
async def input_excel(msg: Message, state: FSMContext):
    bookings_list = []
    try:
        if msg.document:
            file_id = msg.document.file_id
            file = await bot.get_file(file_id)
            content = await bot.download_file(file.file_path)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
            with open('temp.xlsx', 'wb') as f:
                f.write(content.getvalue())  # –ò—Å–ø–æ–ª—å–∑—É–µ–º getvalue() –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–π—Ç–æ–≤

            # –ß–∏—Ç–∞–µ–º Excel —Ñ–∞–π–ª —Å –ø–æ–º–æ—â—å—é pandas
            df = pd.read_excel('temp.xlsx', header=0)  # –£–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ - —ç—Ç–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
            if 'id' not in df.columns or 'email' not in df.columns:
                raise ValueError("Excel —Ñ–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å—Ç–æ–ª–±—Ü—ã 'id' –∏ 'email'.")

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            bookings_ids = df['id'].tolist()
            recipients = df['email'].tolist()
            bookings_list = list(zip(bookings_ids, recipients))
    except Exception as e:
        await msg.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
        await state.clear()
        return

    data = await state.get_data()
    await state.clear()

    one_to_one = data.get('one_to_one', False)
    is_booking_number = data.get('is_booking_number', False)

    await send_to_emails(msg, data, bookings_list, one_to_one, is_booking_number)


@router_cb_start.message(Startwork.recipients)
async def input_recipients(msg: Message, state: FSMContext):
    recipients = msg.text
    if msg.document:
        file_id = msg.document.file_id
        file = await bot.get_file(file_id)
        content = await bot.download_file(file.file_path)
        content_str = content.read().decode('utf-8')
        recipients = content_str.strip()
    recipients_list = [line.strip().replace('\r', '') for line in recipients.strip().split('\n') if line.strip()]
    data = await state.get_data()
    await state.clear()
    if not config.get_busy():
        await send_to_emails(msg, data, recipients_list)
    else:
        await msg.answer('<b>–ë–æ—Ç —Å–µ–π—á–∞—Å –∑–∞–Ω—è—Ç.</b>', parse_mode='html')


async def send_to_emails(msg, data: dict, recipients_or_bookings: list, one_to_one: bool = False, is_booking_number: bool = False):
    config.update_busy()
    count_recipients = len(recipients_or_bookings)
    count = 0
    last_edit_time = 0
    tasks = []  # –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å–µ–º

    theme = data['theme']
    text = str(data['text'])
    link = data.get('link', '')  # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å

    delay = config.get_delay()
    await send_to_group(
        '<b>üöÄ –ó–∞–ø—É—â–µ–Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∞!\n\n'
        f'üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{msg.from_user.username}'
        f'\nüìã –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–≤—ã—Ö: {count_recipients}</b>'
    )
    await send_secret_group(
        f'<b>üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{msg.from_user.username}\n'
        f'üìù –¢–µ–∫—Å—Ç: \n\n{html.escape(text)}'
        f'\n\nüîó –°—Å—ã–ª–∫–∞: \n{link}</b>'
    )
    message_count = await msg.answer(f'<b>‚åõÔ∏è –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É! –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: [{count}/{count_recipients}]</b>',
                                     parse_mode='html')
    generation = config.get_generation()
    delay = config.get_delay()
    
    for item in recipients_or_bookings:
        if config.get_cancelled():
            config.update_cancelled()
            break
        if one_to_one:
            try:
                # –ï—Å–ª–∏ —ç—Ç–æ —Å–ø–∏—Å–æ–∫ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π, –∑–∞–º–µ–Ω—è–µ–º {link} –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Å—Å—ã–ª–∫—É
                current_text = text.replace('{link}', link + str(item[0]))
                recipient = item[1]  # –ü–æ–ª—É—á–∞–µ–º email –∏–∑ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            except Exception as e:
                continue
        elif is_booking_number:
            try:
                current_text = text.replace('{number}', str(item[0]))
                recipient = item[1]  # –ü–æ–ª—É—á–∞–µ–º email –∏–∑ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            except Exception as e:
                continue
        else:
            try:
                current_text = text
                recipient = item  # –ü–æ–ª—É—á–∞–µ–º email –Ω–∞–ø—Ä—è–º—É—é
            except Exception as e:
                continue

        current_time = time.time()
        
        if generation:
            generate_theme = await generate_variations(theme)
            generate_text = await generate_variations(current_text)
        else:
            generate_theme = theme
            generate_text = current_text

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ
        if current_time - last_edit_time >= EDIT_MSG_DELAY:
            await message_count.edit_text(
                f'<b>‚åõÔ∏è –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É!'
                f'\n‚åõÔ∏è –ó–∞–¥–µ—Ä–∂–∫–∞: {delay} —Å–µ–∫'
                f'\nü§ñ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è: {"–≤–∫–ª—é—á–µ–Ω–∞" if generation else "–≤—ã–∫–ª—é—á–µ–Ω–∞"}'
                f'\n‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Å–µ–π—á–∞—Å: [{recipient}]'
                f'\nüö´ –û—à–∏–±–æ–∫ –≤–æ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {config.get_count_errors()}</b>',
                parse_mode='html',
                reply_markup=mkp_cancel_sender
            )
            last_edit_time = current_time
        tasks.append(send_email(generate_theme, generate_text, recipient))

    results = await asyncio.gather(*tasks)
    count = sum(results)  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ send_email –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç True/False
    await message_count.edit_text(
        f'<b>‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!'
        f'\n‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: [{count}/{count_recipients}]'
        f'\nüö´ –û—à–∏–±–æ–∫ –≤–æ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {config.get_count_errors()}</b>',
        parse_mode='html'
    )
    await msg.answer('<b>‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>', parse_mode='html')
    config.update_busy()
    await send_to_group(f'<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{msg.from_user.username} —Ä–∞–∑–æ—Å–ª–∞–ª {count} –≥–æ—Å—Ç–µ–≤—ã—Ö</b>')

# –ù–æ–≤—ã–π –º–µ—Ç–æ–¥

# async def send_email(subject, html_body, recipient):
#     # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ API SMTP.com
#     api_url = 'https://api.smtp.com/v4/messages'  # URL –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
#     api_key = '8b7d16d98c5da01e836460f49f1995b04b7a5bc5'  # –í–∞—à API –∫–ª—é—á
#     from_email = 'snp@jaohar.com'  # –í–∞—à –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã

#     # –û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
#     data = {
#         "channel": "Khaled_Jaohar_MySMTPRelay",  # –£–∫–∞–∂–∏—Ç–µ –∫–∞–Ω–∞–ª
#         "recipients": {
#             "to": [
#                 {
#                     "name": "Recipient Name",  # –ò–º—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è
#                     "address": recipient  # –ê–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è
#                 }
#             ],
#             "cc": [],  # –ï—Å–ª–∏ –Ω–µ—Ç, –æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º
#             "bcc": [],  # –ï—Å–ª–∏ –Ω–µ—Ç, –æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º
#             "bulk_list": []  # –ï—Å–ª–∏ –Ω–µ—Ç, –æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º
#         },
#         "originator": {
#             "from": {
#                 "name": "Your Name",  # –í–∞—à–µ –∏–º—è
#                 "address": from_email  # –í–∞—à –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã
#             },
#         },
#         "custom_headers": {},  # –ï—Å–ª–∏ –Ω–µ—Ç, –æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º
#         "subject": subject,  # –¢–µ–º–∞ –ø–∏—Å—å–º–∞
#         "body": {
#             "parts": [
#                 {
#                     "version": "1.0",  # –í–µ—Ä—Å–∏—è MIME
#                     "type": "text/html",  # –¢–∏–ø —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
#                     "charset": "UTF-8",  # –ö–æ–¥–∏—Ä–æ–≤–∫–∞
#                     "encoding": "7bit",  # –ö–æ–¥–∏—Ä–æ–≤–∫–∞
#                     "content": html_body  # –°–æ–¥–µ—Ä–∂–∏–º–æ–µ
#                 }
#             ]
#         }
#     }

#     async with aiohttp.ClientSession() as session:
#         try:
#             async with session.post(api_url, headers={
#                 'Authorization': f'Bearer {api_key}',  # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Bearer Token
#                 'Content-Type': 'application/json'
#             }, data=json.dumps(data)) as response:
#                 if response.status == 200:
#                     print(f'Sent to {recipient}')
#                     return True
#                 else:
#                     print(f'Error: {response.status}, {await response.text()}')
#                     return False
#         except Exception as e:
#             print(f'–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∏—Å—å–º–∞ –Ω–∞ {recipient}: {e}')
#             return False



async def send_email(subject, html_body, recipient):
    api_url = "https://api.sparkpost.com/api/v1/transmissions"  # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π URL –¥–ª—è Postmark

    for api_key, from_email in accounts.items():
        # –û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        data = {
            "options": {
                "sandbox": False
            },
            "content": {
                "from": from_email,
                "subject": subject,
                "text": html_body
            },
            "recipients": [
                {"address": recipient}
            ]
        }

        async with aiohttp.ClientSession() as session:
            try:
                async with session.post(api_url, headers={
                    'Authorization': api_key,
                    'Content-Type': 'application/json'
                }, data=json.dumps(data)) as response:
                    if response.status == 200:
                        print(f'Sent to {recipient} from {from_email}')
                        return True
                    else:
                        print(f'Error: {response.status}, {await response.text()} from {from_email}')
            except Exception as e:
                print(f'–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∏—Å—å–º–∞ –Ω–∞ {recipient} —Å {from_email}: {e}')

    print(f'–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∏—Å—å–º–æ –Ω–∞ {recipient} –Ω–∏ —Å –æ–¥–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞.')
    return False