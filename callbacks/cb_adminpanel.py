from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message
from aiogram import Router, F
from aiogram.fsm.state import State, StatesGroup

from bot_create import api_key
from modules.brevo import get_account_status
from settings import config
from db.create_db import get_all_telegram_ids
from external.messages import send_to_users
from keyboard.mkp_cancel import mkp_cancel

class SetDelay(StatesGroup):
    setdelay = State()

class SetAdmin(StatesGroup):
    setadmin = State()
    
class SetUser(StatesGroup):
    setuser = State()

class SetCountMsg(StatesGroup):
    setcount = State()

class SendMessageAll(StatesGroup):
    text = State()

cb_adminpanel = Router()

@cb_adminpanel.callback_query(F.data.startswith('admin.'))
async def admin_panel(call: CallbackQuery, state: FSMContext):
    if call.data == 'admin.setdelay':
        delay = config.get_delay()
        await call.message.edit_text(f'<b>–¢–µ–∫—É—â–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞: {delay}\n‚úÖ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏: </b>', parse_mode='html')
        await state.set_state(SetDelay.setdelay)
    elif call.data == 'admin.setadmin':
        await call.message.edit_text(f'<b>‚úÖ –í–≤–µ–¥–∏—Ç–µ –∞–π–¥–∏ –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: </b>', parse_mode='html')
        await state.set_state(SetAdmin.setadmin)
    elif call.data == 'admin.setcount':
        count_messages = config.get_count_messages()
        await call.message.edit_text(f'<b>–¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ 1 –∞–∫–∫–∞—É–Ω—Ç: {count_messages}'
                                     '\n‚úÖ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ 1 –∞–∫–∫–∞—É–Ω—Ç: </b>', parse_mode='html')
        await state.set_state(SetCountMsg.setcount)
    elif call.data == 'admin.generation':
        if config.get_generation:
            config.update_generation()
            await call.message.edit_text(f'<b>ü§ñ –í—ã —É—Å–ø–µ—à–Ω–æ {"–≤–∫–ª—é—á–∏–ª–∏" if config.get_generation() else "–æ—Ç–∫–ª—é—á–∏–ª–∏"} –≥–µ–Ω–µ—Ä–∞—Ü–∏—é</b>', parse_mode='html')
    elif call.data == 'admin.brevoinfo':
        await call.message.edit_text(
            f'<b>{await get_account_status(api_key)}</b>',
            parse_mode='html'
        )
    elif call.data == 'admin.sendall':
        await call.message.edit_text(
            f'<b>üì¢ –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏: (–º–æ–∂–Ω–æ —Å html-—Ç–µ–≥–∞–º–∏)</b>',
            parse_mode='html',
            reply_markup=mkp_cancel
        )
        await state.set_state(SendMessageAll.text)


@cb_adminpanel.message(SendMessageAll.text)
async def input_text(message: Message, state: FSMContext):
    all_users = await get_all_telegram_ids()
    succesfull_send = await send_to_users(all_users, message.text)
    await message.answer(f'<b>‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º. –í—Å–µ–≥–æ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {succesfull_send}</b>', parse_mode='html')
    await state.clear()


@cb_adminpanel.message(SetDelay.setdelay)
async def setdelay(message: Message, state: FSMContext):
    try:
        delay = int(message.text)
    except ValueError:
        await message.reply("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")
        return
    config.update_delay(delay)
    await message.answer(f'<b>‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –∑–∞–¥–µ—Ä–∂–∫—É –≤ {delay} —Å–µ–∫—É–Ω–¥.</b>', parse_mode='html')
    await state.clear()
    

@cb_adminpanel.message(SetAdmin.setadmin)
async def setadmin(message: Message, state: FSMContext):
    try:
        admin = int(message.text)
    except ValueError:
        await message.reply("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")
        return
    config.set_admin(admin)
    await message.answer(f'<b>‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞ {admin}.</b>', parse_mode='html')
    await state.clear()


@cb_adminpanel.message(SetUser.setuser)
async def setuser(message: Message, state: FSMContext):
    try:
        user = int(message.text)
    except ValueError:
        await message.reply("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")
        return
    config.set_user(user)
    await message.answer(f'<b>‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user}.</b>', parse_mode='html')
    await state.clear()


@cb_adminpanel.message(SetCountMsg.setcount)
async def set_count_msg(message: Message, state: FSMContext):
    try:
        count = int(message.text)
    except ValueError:
        await message.reply("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")
        return
    config.update_count_messages(count)
    await message.answer(f'<b>‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ 1 –∞–∫–∫–∞—É–Ω—Ç {count}.</b>', parse_mode='html')
    await state.clear()
